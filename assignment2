//Question1

The console object provides access to the browser's debugging console.
The methods are:-
1.console.assert():-Log a message and stack trace to console if the first argument is false.
2.console.clear():-Clear the console.
3.console.count():-Log the number of times this line has been called with the given label.
4.console.countReset():-Resets the value of the counter with the given label.
5.console.debug():-Outputs a message to the console with the log level "debug".
6.console.dir():-Displays an interactive listing of the properties of a specified JavaScript object.This listing lets you use disclosure triangles to examine the contents of child objects.
7.console.warn():-Outputs a warning message. You may use string substitution and additional arguments with this method.
8.console.log():-For general output of logging information.You may use string substitution and additional arguments with this method.
9.console.trace():-Outputs a stack trace.
10.console.timeLog():-Logs the value of the specified timer to the console.
11.console.table():-Displays tabular data as a table.
12.console.time():-Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.
13.console.timeEnd():-Stops the specified timer and logs the elapsed time in seconds since it started.
14.console.groupEnd():-Exits the current inline group.
15.console.info():-Informative logging of information. You may use string substitution and additional arguments with this method.

//Question2

In Javascript one can define variables using the keywords var, let or const.
e.g  var a=10;
let b=20;
const PI=3.14;

var:= The scope of a variable defined with the keyword “var” is limited to the “function” within which it is defined. If it is defined outside any function, the scope of the variable is global.
var is “function scoped”.
let:= The scope of a variable defined with the keyword “let” or “const” is limited to the “block” defined by curly braces i.e. {} .
“let” and “const” are“block scoped”.
const:= The scope of a variable defined with the keyword “const” is limited to the block defined by curly braces. However if a variable is defined with keyword const, it cannot be reassigned.
“const” cannot be re-assigned to a new value. However it CAN be mutated.

//Question3

Datatypes in javascript are:-
1.Number:-The number type represents both integer and floating point numbers.There are many operations for numbers, e.g. multiplication *, division /, addition +, subtraction -, and so on.
e.g let n = 123;
n = 12.345;

2.BigInt:-In JavaScript, the “number” type cannot represent integer values larger than (253-1) (that’s 9007199254740991), or less than -(-253-1) for negatives. It’s a technical limitation caused by their internal representation.
For most purposes that’s quite enough, but sometimes we need really big numbers, e.g. for cryptography or microsecond-precision timestamps.
BigInt type was recently added to the language to represent integers of arbitrary length.
A BigInt value is created by appending n to the end of an integer:const bigInt = 1234567890123456789012345678901234567890n;

3.String
A string in JavaScript must be surrounded by quotes.
e.g let str = "Hello";
let str2 = 'Single quotes are ok too';
let phrase = `can embed another ${str}`;

4.Boolean (logical type)
The boolean type has only two values: true and false.This type is commonly used to store yes/no values: true means “yes, correct”, and false means “no, incorrect”.
For instance:
let nameFieldChecked = true; // yes, name field is checked
let ageFieldChecked = false;
Boolean values also come as a result of comparisons:
let isGreater = 4 > 1;
alert( isGreater )

5.The “null” value
The special null value does not belong to any of the types described above.
It forms a separate type of its own which contains only the null value:
let age = null;
In JavaScript, null is not a “reference to a non-existing object” or a “null pointer” like in some other languages.

6.The “undefined” value
The special value undefined also stands apart. It makes a type of its own, just like null.The meaning of undefined is “value is not assigned”.
If a variable is declared, but not assigned, then its value is undefined:
let age;
alert(age);